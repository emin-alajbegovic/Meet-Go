// <auto-generated />
using System;
using MeetAndGo.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeetAndGo.Migrations
{
    [DbContext(typeof(meetGoContext))]
    [Migration("20220307195029_updatePictureSize")]
    partial class updatePictureSize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeetAndGo.Database.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Cameras")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfOffices")
                        .HasColumnType("int");

                    b.Property<bool>("Parking")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool>("Rented")
                        .HasColumnType("bit");

                    b.Property<bool>("Security")
                        .HasColumnType("bit");

                    b.Property<int>("TypeOfBuildingId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("CityId");

                    b.HasIndex("TypeOfBuildingId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("MeetAndGo.Database.BuildingReview", b =>
                {
                    b.Property<int>("BuildingReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("BuildingReviewId", "UserId", "BuildingId")
                        .HasName("Pk_BuildingReview_BuildingReviewIdUserIdBuildingId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("UserId");

                    b.ToTable("BuildingReview");
                });

            modelBuilder.Entity("MeetAndGo.Database.CanceledBuilding", b =>
                {
                    b.Property<int>("CanceledBuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Fee")
                        .HasColumnType("bit");

                    b.Property<decimal?>("FeePrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CanceledBuildingId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("UserId");

                    b.ToTable("CanceledBuilding");
                });

            modelBuilder.Entity("MeetAndGo.Database.CanceledOffice", b =>
                {
                    b.Property<int>("CanceledOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Fee")
                        .HasColumnType("bit");

                    b.Property<decimal?>("FeePrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("CanceledOfficeId", "OfficeId", "UserId")
                        .HasName("Pk_CanceledOffice_CanceledOfficeIdOfficeIdUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("CanceledOffice");
                });

            modelBuilder.Entity("MeetAndGo.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("MeetAndGo.Database.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("MeetAndGo.Database.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Cameras")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<bool>("Parking")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool>("Rented")
                        .HasColumnType("bit");

                    b.Property<int>("TypeOfOfficeId")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.HasIndex("CityId");

                    b.HasIndex("TypeOfOfficeId");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("MeetAndGo.Database.OfficeReview", b =>
                {
                    b.Property<int>("OfficeReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("OfficeReviewId", "UserId", "OfficeId")
                        .HasName("Pk_OfficeReview_OfficeReviewIdUserIdOfficeId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("OfficeReview");
                });

            modelBuilder.Entity("MeetAndGo.Database.RentedBuilding", b =>
                {
                    b.Property<int>("RentedBuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Rented")
                        .HasColumnType("bit");

                    b.HasKey("RentedBuildingId", "BuildingId", "UserId")
                        .HasName("Pk_RentedBuilding_RentedBuildingIdBuildingIdUserId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("UserId");

                    b.ToTable("RentedBuilding");
                });

            modelBuilder.Entity("MeetAndGo.Database.RentedOffice", b =>
                {
                    b.Property<int>("RentedOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Rented")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RentedOfficeId", "OfficeId")
                        .HasName("Pk_RentedOffice_RentedOfficeIdOfficeId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("RentedOffice");
                });

            modelBuilder.Entity("MeetAndGo.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MeetAndGo.Database.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("TransactionId", "UserId")
                        .HasName("Pk_Transactions_TransactionIdUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MeetAndGo.Database.TypeOfBuilding", b =>
                {
                    b.Property<int>("TypeOfBuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeOfBuildingId");

                    b.ToTable("TypeOfBuilding");
                });

            modelBuilder.Entity("MeetAndGo.Database.TypeOfOffice", b =>
                {
                    b.Property<int>("TypeOfOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeOfOfficeId");

                    b.ToTable("TypeOfOffice");
                });

            modelBuilder.Entity("MeetAndGo.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MeetAndGo.Database.UserAccount", b =>
                {
                    b.Property<int>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserAccountId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("MeetAndGo.Database.UserAccountRole", b =>
                {
                    b.Property<int>("UserAccountRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("UserAccountRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserAccountRole");
                });

            modelBuilder.Entity("MeetAndGo.Database.Building", b =>
                {
                    b.HasOne("MeetAndGo.Database.City", "City")
                        .WithMany("Building")
                        .HasForeignKey("CityId")
                        .HasConstraintName("Fk_City_Building_CityId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.TypeOfBuilding", "TypeOfBuilding")
                        .WithMany("Building")
                        .HasForeignKey("TypeOfBuildingId")
                        .HasConstraintName("Fk_TypeOfBuilding_Building_TypeOfBuildingId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.BuildingReview", b =>
                {
                    b.HasOne("MeetAndGo.Database.Building", "Building")
                        .WithMany("BuildingReview")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("Fk_Building_BuildingReview_BuildingId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.User", "User")
                        .WithMany("BuildingReview")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_User_BuildingReview_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.CanceledBuilding", b =>
                {
                    b.HasOne("MeetAndGo.Database.Building", "Building")
                        .WithMany("CanceledBuilding")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("Fk_Building_CanceledBuilding_BuildingId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.User", "User")
                        .WithMany("CanceledBuilding")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_User_CanceledBuilding_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.CanceledOffice", b =>
                {
                    b.HasOne("MeetAndGo.Database.Office", "Office")
                        .WithMany("CanceledOffice")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("Fk_Office_CanceledOffice_OfficeId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.User", "User")
                        .WithMany("CanceledOffice")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_User_CanceledOffice_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.City", b =>
                {
                    b.HasOne("MeetAndGo.Database.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("Fk_Country_City_CountryId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.Office", b =>
                {
                    b.HasOne("MeetAndGo.Database.City", "City")
                        .WithMany("Office")
                        .HasForeignKey("CityId")
                        .HasConstraintName("Fk_City_Office_CityId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.TypeOfOffice", "TypeOfOffice")
                        .WithMany("Office")
                        .HasForeignKey("TypeOfOfficeId")
                        .HasConstraintName("Fk_TypeOfOffice_Office_TypeOfOfficeId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.OfficeReview", b =>
                {
                    b.HasOne("MeetAndGo.Database.Office", "Office")
                        .WithMany("OfficeReview")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("Fk_Office_OfficeReview_OfficeId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.User", "User")
                        .WithMany("OfficeReview")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_User_OfficeReview_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.RentedBuilding", b =>
                {
                    b.HasOne("MeetAndGo.Database.Building", "Building")
                        .WithMany("RentedBuilding")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("Fk_Building_RentedBuilding_BuildingId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.User", "User")
                        .WithMany("RentedBuilding")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_User_RentedBuilding_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.RentedOffice", b =>
                {
                    b.HasOne("MeetAndGo.Database.Office", "Office")
                        .WithMany("RentedOffice")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("Fk_Office_RentedOffice_OfficeId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.User", "User")
                        .WithMany("RentedOffice")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_User_RentedOffice_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.Transactions", b =>
                {
                    b.HasOne("MeetAndGo.Database.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_User_Transactions_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.User", b =>
                {
                    b.HasOne("MeetAndGo.Database.UserAccount", "UserAccount")
                        .WithMany("User")
                        .HasForeignKey("UserAccountId")
                        .HasConstraintName("Fk_UserAccount_User_UserAccountId")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetAndGo.Database.UserAccountRole", b =>
                {
                    b.HasOne("MeetAndGo.Database.Role", "Role")
                        .WithMany("UserAccountRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("Fk_Role_UserAccountRole_RoleId")
                        .IsRequired();

                    b.HasOne("MeetAndGo.Database.UserAccount", "UserAccount")
                        .WithMany("UserAccountRole")
                        .HasForeignKey("UserAccountId")
                        .HasConstraintName("Fk_UserAccount_UserAccountRole_UserAccountId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
